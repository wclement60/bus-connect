-- Table pour suivre les lectures des posts par utilisateur
CREATE TABLE IF NOT EXISTS public.forum_post_views (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  post_id UUID NOT NULL REFERENCES public.forum_posts(id) ON DELETE CASCADE,
  user_id UUID NOT NULL REFERENCES public.users(id) ON DELETE CASCADE,
  last_read_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  created_at TIMESTAMPTZ DEFAULT NOW(),
  
  -- S'assurer qu'il n'y a qu'une seule entrée par utilisateur et par post
  UNIQUE (post_id, user_id)
);

-- Index pour de meilleures performances
CREATE INDEX idx_forum_post_views_user_post ON public.forum_post_views(user_id, post_id);

-- Activer la sécurité au niveau des lignes (RLS)
ALTER TABLE public.forum_post_views ENABLE ROW LEVEL SECURITY;

-- Les utilisateurs peuvent créer, lire, mettre à jour et supprimer leurs propres enregistrements de lecture
CREATE POLICY "Users can manage their own post views" ON public.forum_post_views
  FOR ALL
  USING (user_id = auth.uid())
  WITH CHECK (user_id = auth.uid());
  
-- Fonction pour marquer un post comme lu (UPSERT)
CREATE OR REPLACE FUNCTION mark_post_as_read(p_post_id UUID)
RETURNS void AS $$
DECLARE
  current_user_id UUID := auth.uid();
BEGIN
  IF current_user_id IS NOT NULL THEN
    INSERT INTO public.forum_post_views (post_id, user_id, last_read_at)
    VALUES (p_post_id, current_user_id, NOW())
    ON CONFLICT (post_id, user_id)
    DO UPDATE SET last_read_at = NOW();
  END IF;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Donner la permission d'exécuter la fonction aux utilisateurs authentifiés
GRANT EXECUTE ON FUNCTION mark_post_as_read(UUID) TO authenticated; 